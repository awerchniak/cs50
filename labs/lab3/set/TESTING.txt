TESTING for set.c
Andy Werchniak, July 2016

### Test for memory leaks
[awerchniak@flume ]$ leakVal ./settest
==31060== Memcheck, a memory error detector
==31060== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==31060== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==31060== Command: ./settest
==31060== 
Filling set 1
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4C2BA28: strlen (vg_replace_strmem.c:454)
==31060==    by 0x400CA2: set_insert (set.c:98)
==31060==    by 0x400898: main (settest.c:43)
==31060== 
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4C2BB18: strcpy (vg_replace_strmem.c:506)
==31060==    by 0x400CE6: set_insert (set.c:101)
==31060==    by 0x400898: main (settest.c:43)
==31060== 
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4C2CA6C: strcmp (vg_replace_strmem.c:842)
==31060==    by 0x400B4B: set_find (set.c:62)
==31060==    by 0x4008D2: main (settest.c:45)
==31060== 
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4C2CA5A: strcmp (vg_replace_strmem.c:842)
==31060==    by 0x400B4B: set_find (set.c:62)
==31060==    by 0x4008D2: main (settest.c:45)
==31060== 
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4E8137C: vfprintf (in /usr/lib64/libc-2.22.so)
==31060==    by 0x4E88D48: printf (in /usr/lib64/libc-2.22.so)
==31060==    by 0x4008E7: main (settest.c:45)
==31060== 
Found string 'nwlrbbmqbhcdarz' in set1
Found string 'sbcnuvqhffbsaqx' in set1
Found string 'umoqcdrubetokyx' in set1
Found string 'ooobppleqlwphap' in set1
Found string 'qtpddbuotbbqcwi' in set1
Found string 'dsozoyvegurfwcs' in set1
Found string 'wctgtwmxnupycfg' in set1
Found string 'ycqhkleewhxtemb' in set1
Found string 'bjguxhxdipfzwsw' in set1
Found string 'ngcomikjzsdwssz' in set1
Filling set 2
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4C2BA28: strlen (vg_replace_strmem.c:454)
==31060==    by 0x400CA2: set_insert (set.c:98)
==31060==    by 0x400958: main (settest.c:55)
==31060== 
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4C2BB18: strcpy (vg_replace_strmem.c:506)
==31060==    by 0x400CE6: set_insert (set.c:101)
==31060==    by 0x400958: main (settest.c:55)
==31060== 
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4C2CA6C: strcmp (vg_replace_strmem.c:842)
==31060==    by 0x400B4B: set_find (set.c:62)
==31060==    by 0x400992: main (settest.c:57)
==31060== 
==31060== Conditional jump or move depends on uninitialised value(s)
==31060==    at 0x4C2CA5A: strcmp (vg_replace_strmem.c:842)
==31060==    by 0x400B4B: set_find (set.c:62)
==31060==    by 0x400992: main (settest.c:57)
==31060== 
Found int '0' in set2
Found int '10' in set2
Found int '20' in set2
Found int '30' in set2
Found int '40' in set2
Found int '50' in set2
Found int '60' in set2
Found int '70' in set2
Found int '80' in set2
Found int '90' in set2
Set successfully deleted.
Set successfully deleted.
==31060== 
==31060== HEAP SUMMARY:
==31060==     in use at exit: 0 bytes in 0 blocks
==31060==   total heap usage: 802 allocs, 802 frees, 12,448 bytes allocated
==31060== 
==31060== All heap blocks were freed -- no leaks are possible
==31060== 
==31060== For counts of detected and suppressed errors, rerun with: -v
==31060== Use --track-origins=yes to see where uninitialised values come from
==31060== ERROR SUMMARY: 450 errors from 9 contexts (suppressed: 0 from 0)


###NOTE: The above errors all concern the string functions in the string.h library.
	Usage/implementation is in set_insert and set_find is identical to that in the 
	treenode_new and treenode_find functions of the tree6 example distributed to the
	class. Although these valgrind errors are pesky, the program compiles and runs
	perfectly with no memory leaks, and they seem to have no effect on its functionality.
	The author assumes it is okay to implement the string functions in the same manner
	that they were implemented in distributed class materials.

